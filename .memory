# Product Requirement Document of Mochi Chat

## Project Overview
Mochi Chat is a browser extension that provides intelligent chat functionality, with capabilities for handling various types of content including PDFs and web content. It features a floating chat interface that can be toggled and positioned anywhere on the webpage.

## System Architecture

### Component Overview
```mermaid
sequenceDiagram
    participant User
    participant Content as Content Script
    participant Extract as Text Extractor
    participant Chat as Chat Module
    participant Conv as Conversation
    participant Back as Background
    participant AI as AI Provider

    User->>Content: Toggle Chat Interface
    Content->>Extract: Extract Page Content
    
    alt PDF Content
        Extract->>Back: Request PDF Data
        Back-->>Extract: Return Base64 PDF
        Extract->>Extract: Process with PDF.js
    else Web Content
        Extract->>Extract: Select Semantic Elements
        Extract->>Extract: Filter & Clean Content
    end
    
    Extract->>Conv: Add Extracted Text
    Conv->>Conv: Initialize History with Instructions
    
    User->>Content: Send Message
    Content->>Chat: Request Response
    Chat->>Conv: Get Conversation History
    Conv-->>Chat: Return History
    
    alt Current Provider is OpenAI
        Chat->>AI: Stream Request (OpenAI)
        loop For each token
            AI-->>Chat: Stream Token
            Chat->>Content: Update UI
        end
    else Current Provider is Gemini
        Chat->>AI: Stream Request (Gemini)
        loop For each chunk
            AI-->>Chat: Return Large Chunk
            Chat->>Chat: Break into 6-char chunks
            loop For each small chunk
                Chat->>Content: Update UI (5ms delay)
            end
        end
    end
    
    Chat->>Conv: Update History
    Content->>User: Display Final Response
```

## Core Components

### 1. Chat Module (chat.js)
Handles AI provider integration and response streaming.

#### Configuration
```javascript
const AI_PROVIDERS = {
  GEMINI: 'gemini',
  OPENAI: 'openai'
};

const CURRENT_PROVIDER = AI_PROVIDERS.GEMINI;

const API_KEYS = {
  [AI_PROVIDERS.OPENAI]: 'sk-...',
  [AI_PROVIDERS.GEMINI]: 'AIzaSyDrjcE-XasBhvv38xr8ra7hGHcG7DpwMA8'
};

const AI_MODELS = {
  [AI_PROVIDERS.OPENAI]: 'gpt-4o-mini',
  [AI_PROVIDERS.GEMINI]: 'gemini-2.0-flash-exp'
};
```

#### Key Functions
1. **generateChatGPTResponse(prompt)**
   - Main entry point for chat functionality
   - Resets accumulated response
   - Gets conversation history
   - Streams response from selected provider
   - Updates history with completed conversation

2. **streamOpenAIResponse(messages)**
   - Handles OpenAI streaming
   - Processes chunks using SSE
   - Accumulates response text
   - Sends UI updates

3. **streamGeminiResponse(messages)**
   - Manages Gemini API connection
   - Processes larger response chunks
   - Handles JSON parsing with depth tracking
   - Breaks chunks into smaller pieces

4. **streamTextInChunks(text)**
   - Optimizes chunk processing
   - 6-character chunk size
   - 5ms delay between chunks
   - Preserves word boundaries

### 2. Text Extraction Module (extract-text.js)
Handles content extraction from different sources.

#### Content Selection
1. **Semantic Elements**
   ```javascript
   const CONTENT_SELECTORS = [
     // HTML5 semantic
     'p', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
     'article', 'section', 'main',
     'li', 'td', 'th', 'dt', 'dd',
     
     // Rich semantic roles
     '[role="article"]',
     '[role="main"]',
     '[role="contentinfo"]',
     
     // Web App Specific
     '.email-body',
     '.message',
     '.conversation',
     '[role="textbox"]',
     '[contenteditable="true"]'
   ]
   ```

2. **Excluded Elements**
   ```javascript
   const EXCLUDE_SELECTOR = [
     // Technical
     'script', 'style', 'iframe', 'code',
     
     // Navigation
     'nav', '[role="navigation"]',
     '.menu-item', '.nav-item',
     
     // UI Elements
     '.popup', '.modal', '.overlay',
     '.tooltip', '.loading',
     
     // Metadata
     '.meta', '.metadata',
     '.timestamp', '.info-box'
   ]
   ```

#### Key Functions
1. **extractFromWebsite()**
   - Selects meaningful content
   - Filters based on visibility
   - Prevents duplicates
   - Handles block-level elements

2. **extractFromPDF(file)**
   - Uses PDF.js for extraction
   - Handles password protection
   - Processes page by page
   - Tracks extraction progress

3. **extractText(options)**
   - Main interface for extraction
   - Type-specific handling
   - Error management
   - Progress reporting

### 3. Conversation Manager (conversation.js)
Manages chat history and context.

#### System Instructions
```javascript
const CHAT_INSTRUCTIONS = `Based on the text above:
- **Provide a straightforward, concise response**
- Use bullet points or numbering when appropriate
- Only when asked about a specific page, provide a response based on the page text alone.
- Only when asked about which page, answer the page numbers from the PDF text and in relevance to the query or most recent conversation.
- When asked about a question involving some calculation, simply provide the answer/end result, and one line of work in human language (i.e. Profit Margin = Net Income / Revenue)
`;
```

#### Key Functions
1. **addExtractedText(extractedText)**
   - Resets conversation history
   - Sets up system context
   - Adds AI instructions

2. **addToHistory(messages)**
   - Appends new messages
   - Preserves context
   - Validates history state

3. **getHistory()**
   - Returns current history
   - Includes system messages

4. **clearHistory()**
   - Resets conversation state
   - Used for fresh starts
   - Error recovery

### 4. Background Script (background.js)
Handles extension-wide functionality.

#### Key Features
1. **Logging System**
   ```javascript
   function logToConsole(message, source = 'Mochi-Background', isError = false) {
     const timestamp = new Date().toISOString();
     const logMessage = `[${timestamp}] [${source}] ${message}`;
     isError ? console.error(logMessage) : console.log(logMessage);
   }
   ```

2. **PDF Processing**
   - Fetches local PDFs
   - Base64 encoding
   - Error handling
   - Progress tracking

3. **Message Handling**
   - checkFilePermission
   - openExtensionsPage
   - logFromContent
   - conversationUpdated
   - fetchLocalPDF

## Development Guidelines

### 1. Code Organization
1. **Module Structure**
   ```javascript
   /**
    * Module Name
    * 
    * Description of module purpose and features
    * 
    * Key Features:
    * - Feature 1
    * - Feature 2
    */

   //=============================================================================
   // Section Name
   //=============================================================================

   /**
    * Function description
    * @param {type} name - Parameter description
    * @returns {type} Return description
    */
   ```

2. **Import Strategy**
   ```javascript
   // Dynamic imports
   const module = await import(chrome.runtime.getURL('./module.js'));
   ```

3. **Error Handling**
   ```javascript
   try {
     // Operation
     logToBackground('Operation successful');
   } catch (error) {
     logToBackground(`Error: ${error.message}`, true);
     throw error;
   }
   ```

### 2. Logging Standards
1. **Format**
   ```
   [2025-01-16T03:08:04Z] [Mochi-Module] Message
   ```

2. **Module Identifiers**
   - [Mochi-Background]
   - [Mochi-Content]
   - [Mochi-Chat]
   - [Mochi-Extract]
   - [Mochi-Conversation]

3. **Log Types**
   - Standard info
   - Error messages
   - Debug information
   - Progress updates

## Tips for Development

### 1. Content Extraction
1. **Website Content**
   - Use semantic selectors first
   - Check element visibility
   - Handle dynamic content
   - Process block elements
   - Remove duplicates

2. **PDF Processing**
   - Handle both local and remote
   - Check file permissions
   - Track extraction progress
   - Handle password protection

### 2. AI Integration
1. **OpenAI**
   - Token-by-token streaming
   - Direct UI updates
   - Error recovery
   - Rate limiting

2. **Gemini**
   - Large chunk processing
   - JSON depth tracking
   - 6-char chunk size
   - 5ms delay between chunks

### 3. Performance
1. **Memory Management**
   - Clear conversation history
   - Process chunks efficiently
   - Handle large PDFs
   - Clean up unused data

2. **UI Responsiveness**
   - Smooth text streaming
   - Progress indicators
   - Error feedback
   - Loading states

## Common Issues and Solutions

### 1. PDF Extraction
- **Issue**: Large PDF files cause memory issues
  **Solution**: Process page by page, clear memory after each page

- **Issue**: Password-protected PDFs fail silently
  **Solution**: Check for password before processing

### 2. Text Streaming
- **Issue**: Choppy text display with Gemini
  **Solution**: Use 6-char chunks with 5ms delay

- **Issue**: Lost context in conversation
  **Solution**: Validate history before each operation

### 3. Content Selection
- **Issue**: Duplicate content in extraction
  **Solution**: Track processed nodes and text segments

- **Issue**: Missing important content
  **Solution**: Add specific selectors for common patterns

### 4. Chrome Extension Tips

1. **Keyboard Shortcuts**
   - Always include "commands" permission in manifest.json
   - Add detailed logging for command handling:
     ```javascript
     chrome.commands.onCommand.addListener((command) => {
       // Log command received
       // Log processing steps
       // Log success/failure of message sending
     });
     ```
   - Common issues:
     * Missing "commands" permission
     * Not handling chrome.runtime.lastError
     * Not checking response from content script

## Chrome Extension Debugging

### Keyboard Shortcuts

- **Debugging Tips**
  - Use `chrome://extensions/` to inspect and reload extensions
  - Enable developer mode to access debugging tools
  - Use `chrome.runtime.reload()` to reload the extension
  - Inspect background scripts and content scripts separately
  - Use `console.log` statements to log messages and variables
  - Use the Chrome DevTools debugger to set breakpoints and inspect variables
