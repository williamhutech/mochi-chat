%% Mochi Chat Sequence Diagram Guide
%% Based on Mermaid.js
%% Syntax: https://mermaid.js.org/syntax/sequenceDiagram.html

%% 1. Naming Conventions:
%%    - Use descriptive names for participants
%%    - Include file names in participant aliases using <br/>
%%    - Keep messages concise but descriptive
%%    - Use consistent terminology across the diagram
%%
%% 2. Message Types:
%%    - Request: ->> (solid arrow)
%%    - Response: -->> (dashed arrow)
%%    - Error Response: -->> (use same as response)
%%
%% 3. Parallel Operations (par):
%%    - Use for concurrent operations
%%    - Each parallel block should be self-contained
%%    - End with 'and' for additional parallel blocks
%%
%% 4. Critical Sections (critical):
%%    - Use for important operations that require error handling
%%    - Include 'option' blocks for error cases
%%    - Keep critical sections focused on core functionality
%%
%% 5. Grouping (rect):
%%    - Group related operations using rect
%%    - Use rgb(240, 240, 240) for consistent styling
%%    - Label groups with clear section names
%%
%% 6. Activation Bars:
%%    - Use activate/deactivate to show component lifetime
%%    - Show nested activations for call hierarchy
%%    - Ensure proper deactivation order
%%
%% 7. Parameters:
%%    - Show full parameters in notes for important calls
%%    - Mark optional parameters with ?
%%    - Group related parameters together
%%
%% 8. Best Practices:
%%    - Keep the diagram flowing top to bottom
%%    - Group related interactions together
%%    - Include error handling for critical operations
%%    - Show both success and failure paths
%%    - Document complex interactions with parameters
%%

sequenceDiagram
    %% Define all participants upfront for better organization
    participant User
    participant Chrome
    participant Content as Content Script<br/>(content.js)
    participant Background as Background Script<br/>(background.js)
    participant Extract as Text Extractor
    participant Chat as Chat Module<br/>(chat.js)
    participant Conv as Conversation Manager<br/>(conversation.js)
    participant API as Serverless API<br/>(api/chat.js)
    participant OpenAI as OpenAI Handler<br/>(lib/openai.js)
    participant Gemini as Gemini Handler<br/>(lib/gemini.js)

    %% System Initialization
    rect rgb(240, 240, 240)
        Note over User,Gemini: 1. System Initialization
        User->>Chrome: Open webpage
        Chrome->>Content: Tab updated event
        activate Content
        Content->>Background: Log initialization
        Background-->>Content: Logged

        %% Parallel initialization processes
        par UI Initialization
            Content->>Content: initializeChatInput()
            Content->>Content: createChatInterface()
            Content->>Content: hideChatInterface()
        and Content Extraction
            Content->>Content: extractPageText()
            Content->>Conv: setExtractionComplete(false)
            
            Note right of Content: Dynamic Website Text Extraction
            Content->>Extract: extractText(options)
            activate Extract
            
            Extract->>Extract: Phase 1: Initial Extraction
            Note right of Extract: Extract static content
            
            Extract->>Extract: Phase 2: Wait for Dynamic Content
            Note right of Extract: Use MutationObserver to detect DOM changes
            
            Extract->>Extract: Phase 3: Follow-up Extraction
            Note right of Extract: Capture newly loaded content
            
            Extract->>Extract: Phase 4: Final Deduplication
            Note right of Extract: Process and format extracted text
            
            Extract-->>Content: Extracted Text
            deactivate Extract
            
            Content->>Conv: addExtractedText(text)
            Conv->>Conv: setExtractionComplete(true)
            
            Content->>Content: checkIfDynamicWebApp()
        end

        %% Module Loading
        Content->>Chat: loadChatModule()
        activate Chat
        Chat->>Conv: import
        activate Conv
        Conv-->>Chat: conversation module
        Chat-->>Content: chat module loaded
        deactivate Content
    end

    %% User Interaction and Chat Flow
    rect rgb(240, 240, 240)
        Note over User,Gemini: 2. User Interaction
        User->>Content: Toggle chat interface
        activate Content
        Content->>Content: toggleChatInterface()
        Content->>Content: showChatInterface()
        Content-->>User: interface visible
        deactivate Content

        User->>Content: Enter prompt
        activate Content
        Content->>Content: showChatInterface()
        
        %% Prompt Queueing System
        alt Extraction in Progress
            Content->>Conv: isTextExtractionComplete()
            Conv-->>Content: false (extraction in progress)
            Content->>Conv: queuePromptIfNeeded()
            Note right of Content: Prompt queued while extraction completes
            Conv-->>Content: Promise resolves when extraction completes
        end
        
        Content->>Chat: sendPrompt(prompt)
        activate Chat
    end
        
    %% Request Preparation
    rect rgb(240, 240, 240)
        Note over User,Gemini: 3. Request Preparation
        par Gather Conversation Context
            Chat->>Conv: getHistory()
            Conv-->>Chat: conversation history
        and Capture Visual Context
            alt isDynamicWebApp is true
                Content->>Content: captureScreenWithoutInterface()
                Content->>Content: enhanceScreenshot()
                Content-->>Chat: screenshot data
            end
        end

        Chat->>Chat: generateChatGPTResponse(prompt, screenshot?, config)
        Note over Chat: config: {<br/>provider: "openai" | "gemini",<br/>model: string<br/>}
    end

    %% API Communication
    rect rgb(240, 240, 240)
        Note over User,Gemini: 4. API Communication
        critical Process Request
            Chat->>API: POST /api/chat
            activate API
            Note over Chat,API: {<br/>messages: Array<Message>,<br/>provider: "openai" | "gemini",<br/>model: string<br/>}

            API->>API: handleMessages()
            API->>API: extractPromptAndScreenshot()

            alt OpenAI Provider
                API->>OpenAI: new OpenAIHandler()
                activate OpenAI
                API->>OpenAI: streamResponse(messages, model, res)
                OpenAI-->>API: SSE chunks
                deactivate OpenAI
            else Gemini Provider
                API->>Gemini: new GeminiHandler()
                activate Gemini
                API->>Gemini: streamResponse(messages, model, res)
                Gemini-->>API: SSE chunks
                deactivate Gemini
            end

            API-->>Chat: SSE response chunks
            deactivate API
        option Network Error
            API-->>Chat: Connection failed
            Chat->>Background: Log error
            Background-->>Chat: Logged
        end
    end

    %% Response Handling
    rect rgb(240, 240, 240)
        Note over User,Gemini: 5. Response Handling
        Chat->>Content: handleStreamingUpdate(chunk)
        activate Content
        par UI Updates
            Content->>Content: renderMarkdown()
            Content->>Content: createPageLinks()
            Content->>Content: checkAndExpandContent()
        and History Management
            Chat->>Conv: addToHistory(messages)
            Conv-->>Chat: history updated
        end
        Content-->>User: UI updated
        deactivate Content
        deactivate Chat

        User->>Content: View response
    end

    %% Error Handling
    rect rgb(240, 240, 240)
        Note over User,Gemini: 6. Error Handling
        User->>Content: Invalid request
        activate Content
        Content->>Chat: sendPrompt(invalid)
        activate Chat
        Chat->>API: POST /api/chat
        activate API
        API-->>Chat: Error response
        Chat->>Background: Log error
        Background-->>Chat: Logged
        Chat->>Content: handleStreamingUpdate(error)
        Content->>Content: showError()
        Content->>Content: resetUIState()
        deactivate Content
        deactivate Chat
        deactivate API
    end
